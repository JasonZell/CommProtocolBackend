// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoPackets.proto

#include "ProtoPackets.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class AirVehicleGroundRelativeStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AirVehicleGroundRelativeState>
      _instance;
} _AirVehicleGroundRelativeState_default_instance_;
class ArmCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArmCommand>
      _instance;
} _ArmCommand_default_instance_;
class ArmPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArmPosition>
      _instance;
} _ArmPosition_default_instance_;
class BatteryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Battery>
      _instance;
} _Battery_default_instance_;
class TargetAcknowledgementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TargetAcknowledgement>
      _instance;
} _TargetAcknowledgement_default_instance_;
class TargetDesignationCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TargetDesignationCommand>
      _instance;
} _TargetDesignationCommand_default_instance_;
class TargetStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TargetStatus>
      _instance;
} _TargetStatus_default_instance_;
class VehicleAttitudeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleAttitude>
      _instance;
} _VehicleAttitude_default_instance_;
class VehicleAuthorizationReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleAuthorizationReply>
      _instance;
} _VehicleAuthorizationReply_default_instance_;
class VehicleAuthorizationRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleAuthorizationRequest>
      _instance;
} _VehicleAuthorizationRequest_default_instance_;
class VehicleBodySensedStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleBodySensedState>
      _instance;
} _VehicleBodySensedState_default_instance_;
class VehicleGlobalPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleGlobalPosition>
      _instance;
} _VehicleGlobalPosition_default_instance_;
class VehicleIdentificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleIdentification>
      _instance;
} _VehicleIdentification_default_instance_;
class VehicleInertialStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleInertialState>
      _instance;
} _VehicleInertialState_default_instance_;
class VehicleModeCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleModeCommand>
      _instance;
} _VehicleModeCommand_default_instance_;
class VehicleSystemStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleSystemStatus>
      _instance;
} _VehicleSystemStatus_default_instance_;
class VehicleTelemetryCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleTelemetryCommand>
      _instance;
} _VehicleTelemetryCommand_default_instance_;
class VehicleTerminationCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleTerminationCommand>
      _instance;
} _VehicleTerminationCommand_default_instance_;
class VehicleWaypointCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleWaypointCommand>
      _instance;
} _VehicleWaypointCommand_default_instance_;
namespace protobuf_ProtoPackets_2eproto {
void InitDefaultsAirVehicleGroundRelativeStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_AirVehicleGroundRelativeState_default_instance_;
    new (ptr) ::AirVehicleGroundRelativeState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AirVehicleGroundRelativeState::InitAsDefaultInstance();
}

void InitDefaultsAirVehicleGroundRelativeState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAirVehicleGroundRelativeStateImpl);
}

void InitDefaultsArmCommandImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_ArmCommand_default_instance_;
    new (ptr) ::ArmCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ArmCommand::InitAsDefaultInstance();
}

void InitDefaultsArmCommand() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsArmCommandImpl);
}

void InitDefaultsArmPositionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_ArmPosition_default_instance_;
    new (ptr) ::ArmPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ArmPosition::InitAsDefaultInstance();
}

void InitDefaultsArmPosition() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsArmPositionImpl);
}

void InitDefaultsBatteryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_Battery_default_instance_;
    new (ptr) ::Battery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Battery::InitAsDefaultInstance();
}

void InitDefaultsBattery() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBatteryImpl);
}

void InitDefaultsTargetAcknowledgementImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_TargetAcknowledgement_default_instance_;
    new (ptr) ::TargetAcknowledgement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TargetAcknowledgement::InitAsDefaultInstance();
}

void InitDefaultsTargetAcknowledgement() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTargetAcknowledgementImpl);
}

void InitDefaultsTargetDesignationCommandImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_TargetDesignationCommand_default_instance_;
    new (ptr) ::TargetDesignationCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TargetDesignationCommand::InitAsDefaultInstance();
}

void InitDefaultsTargetDesignationCommand() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTargetDesignationCommandImpl);
}

void InitDefaultsTargetStatusImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_TargetStatus_default_instance_;
    new (ptr) ::TargetStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TargetStatus::InitAsDefaultInstance();
}

void InitDefaultsTargetStatus() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTargetStatusImpl);
}

void InitDefaultsVehicleAttitudeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_VehicleAttitude_default_instance_;
    new (ptr) ::VehicleAttitude();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VehicleAttitude::InitAsDefaultInstance();
}

void InitDefaultsVehicleAttitude() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicleAttitudeImpl);
}

void InitDefaultsVehicleAuthorizationReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_VehicleAuthorizationReply_default_instance_;
    new (ptr) ::VehicleAuthorizationReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VehicleAuthorizationReply::InitAsDefaultInstance();
}

void InitDefaultsVehicleAuthorizationReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicleAuthorizationReplyImpl);
}

void InitDefaultsVehicleAuthorizationRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_VehicleAuthorizationRequest_default_instance_;
    new (ptr) ::VehicleAuthorizationRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VehicleAuthorizationRequest::InitAsDefaultInstance();
}

void InitDefaultsVehicleAuthorizationRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicleAuthorizationRequestImpl);
}

void InitDefaultsVehicleBodySensedStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_VehicleBodySensedState_default_instance_;
    new (ptr) ::VehicleBodySensedState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VehicleBodySensedState::InitAsDefaultInstance();
}

void InitDefaultsVehicleBodySensedState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicleBodySensedStateImpl);
}

void InitDefaultsVehicleGlobalPositionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_VehicleGlobalPosition_default_instance_;
    new (ptr) ::VehicleGlobalPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VehicleGlobalPosition::InitAsDefaultInstance();
}

void InitDefaultsVehicleGlobalPosition() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicleGlobalPositionImpl);
}

void InitDefaultsVehicleIdentificationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_VehicleIdentification_default_instance_;
    new (ptr) ::VehicleIdentification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VehicleIdentification::InitAsDefaultInstance();
}

void InitDefaultsVehicleIdentification() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicleIdentificationImpl);
}

void InitDefaultsVehicleInertialStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_VehicleInertialState_default_instance_;
    new (ptr) ::VehicleInertialState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VehicleInertialState::InitAsDefaultInstance();
}

void InitDefaultsVehicleInertialState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicleInertialStateImpl);
}

void InitDefaultsVehicleModeCommandImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_VehicleModeCommand_default_instance_;
    new (ptr) ::VehicleModeCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VehicleModeCommand::InitAsDefaultInstance();
}

void InitDefaultsVehicleModeCommand() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicleModeCommandImpl);
}

void InitDefaultsVehicleSystemStatusImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_VehicleSystemStatus_default_instance_;
    new (ptr) ::VehicleSystemStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VehicleSystemStatus::InitAsDefaultInstance();
}

void InitDefaultsVehicleSystemStatus() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicleSystemStatusImpl);
}

void InitDefaultsVehicleTelemetryCommandImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_VehicleTelemetryCommand_default_instance_;
    new (ptr) ::VehicleTelemetryCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VehicleTelemetryCommand::InitAsDefaultInstance();
}

void InitDefaultsVehicleTelemetryCommand() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicleTelemetryCommandImpl);
}

void InitDefaultsVehicleTerminationCommandImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_VehicleTerminationCommand_default_instance_;
    new (ptr) ::VehicleTerminationCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VehicleTerminationCommand::InitAsDefaultInstance();
}

void InitDefaultsVehicleTerminationCommand() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicleTerminationCommandImpl);
}

void InitDefaultsVehicleWaypointCommandImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_VehicleWaypointCommand_default_instance_;
    new (ptr) ::VehicleWaypointCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VehicleWaypointCommand::InitAsDefaultInstance();
}

void InitDefaultsVehicleWaypointCommand() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicleWaypointCommandImpl);
}

::google::protobuf::Metadata file_level_metadata[19];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirVehicleGroundRelativeState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirVehicleGroundRelativeState, vehicle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirVehicleGroundRelativeState, angle_of_attack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirVehicleGroundRelativeState, angle_of_sideslip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirVehicleGroundRelativeState, true_airspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirVehicleGroundRelativeState, indicated_airspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirVehicleGroundRelativeState, north_wind_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirVehicleGroundRelativeState, east_wind_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirVehicleGroundRelativeState, north_ground_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirVehicleGroundRelativeState, east_ground_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirVehicleGroundRelativeState, barometric_pressure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirVehicleGroundRelativeState, barometric_altitude_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ArmCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ArmCommand, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ArmCommand, position_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ArmPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ArmPosition, position1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ArmPosition, position2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ArmPosition, position3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ArmPosition, position4_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Battery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Battery, batterypercentage_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TargetAcknowledgement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TargetAcknowledgement, target_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TargetDesignationCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TargetDesignationCommand, vehicle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TargetDesignationCommand, payload_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TargetDesignationCommand, target_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TargetDesignationCommand, target_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TargetDesignationCommand, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TargetDesignationCommand, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TargetDesignationCommand, altitude_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TargetStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TargetStatus, target_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TargetStatus, target_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TargetStatus, target_altitude_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleAttitude, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleAttitude, vehicle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleAttitude, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleAttitude, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleAttitude, yaw_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleAuthorizationReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleAuthorizationReply, vehicle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleAuthorizationReply, vehicle_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleAuthorizationReply, authorized_services_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleAuthorizationReply, granted_services_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleAuthorizationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleAuthorizationRequest, vehicle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleAuthorizationRequest, vehicle_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleAuthorizationRequest, authorized_services_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleAuthorizationRequest, granted_services_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleBodySensedState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleBodySensedState, vehicle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleBodySensedState, x_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleBodySensedState, y_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleBodySensedState, z_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleBodySensedState, roll_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleBodySensedState, pitch_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleBodySensedState, yaw_rate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleGlobalPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleGlobalPosition, vehicle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleGlobalPosition, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleGlobalPosition, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleGlobalPosition, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleGlobalPosition, x_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleGlobalPosition, y_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleGlobalPosition, z_speed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleIdentification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleIdentification, vehicle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleIdentification, vehicle_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleInertialState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleInertialState, vehicle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleInertialState, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleInertialState, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleInertialState, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleInertialState, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleInertialState, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleInertialState, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleInertialState, north_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleInertialState, east_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleInertialState, vertical_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleInertialState, roll_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleInertialState, pitch_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleInertialState, yaw_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleInertialState, north_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleInertialState, east_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleInertialState, vertical_accel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleModeCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleModeCommand, vehicle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleModeCommand, vehicle_mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleSystemStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleSystemStatus, vehicle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleSystemStatus, vehicle_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleSystemStatus, vehicle_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleTelemetryCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleTelemetryCommand, vehicle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleTelemetryCommand, telemetry_select_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleTelemetryCommand, telemetry_rate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleTerminationCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleTerminationCommand, vehicle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleTerminationCommand, termination_mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleWaypointCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleWaypointCommand, vehicle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleWaypointCommand, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleWaypointCommand, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VehicleWaypointCommand, altitude_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AirVehicleGroundRelativeState)},
  { 16, -1, sizeof(::ArmCommand)},
  { 23, -1, sizeof(::ArmPosition)},
  { 32, -1, sizeof(::Battery)},
  { 38, -1, sizeof(::TargetAcknowledgement)},
  { 44, -1, sizeof(::TargetDesignationCommand)},
  { 56, -1, sizeof(::TargetStatus)},
  { 64, -1, sizeof(::VehicleAttitude)},
  { 73, -1, sizeof(::VehicleAuthorizationReply)},
  { 82, -1, sizeof(::VehicleAuthorizationRequest)},
  { 91, -1, sizeof(::VehicleBodySensedState)},
  { 103, -1, sizeof(::VehicleGlobalPosition)},
  { 115, -1, sizeof(::VehicleIdentification)},
  { 122, -1, sizeof(::VehicleInertialState)},
  { 143, -1, sizeof(::VehicleModeCommand)},
  { 150, -1, sizeof(::VehicleSystemStatus)},
  { 158, -1, sizeof(::VehicleTelemetryCommand)},
  { 166, -1, sizeof(::VehicleTerminationCommand)},
  { 173, -1, sizeof(::VehicleWaypointCommand)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AirVehicleGroundRelativeState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ArmCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ArmPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Battery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TargetAcknowledgement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TargetDesignationCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TargetStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_VehicleAttitude_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_VehicleAuthorizationReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_VehicleAuthorizationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_VehicleBodySensedState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_VehicleGlobalPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_VehicleIdentification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_VehicleInertialState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_VehicleModeCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_VehicleSystemStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_VehicleTelemetryCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_VehicleTerminationCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_VehicleWaypointCommand_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ProtoPackets.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022ProtoPackets.proto\"\276\002\n\035AirVehicleGroun"
      "dRelativeState\022\022\n\nvehicle_id\030\001 \001(\r\022\027\n\017an"
      "gle_of_attack\030\002 \001(\002\022\031\n\021angle_of_sideslip"
      "\030\003 \001(\002\022\025\n\rtrue_airspeed\030\004 \001(\002\022\032\n\022indicat"
      "ed_airspeed\030\005 \001(\002\022\030\n\020north_wind_speed\030\006 "
      "\001(\002\022\027\n\017east_wind_speed\030\007 \001(\002\022\032\n\022north_gr"
      "ound_speed\030\010 \001(\002\022\031\n\021east_ground_speed\030\t "
      "\001(\002\022\033\n\023barometric_pressure\030\n \001(\002\022\033\n\023baro"
      "metric_altitude\030\013 \001(\002\"*\n\nArmCommand\022\n\n\002i"
      "d\030\001 \001(\r\022\020\n\010position\030\002 \001(\005\"Y\n\013ArmPosition"
      "\022\021\n\tposition1\030\001 \001(\005\022\021\n\tposition2\030\002 \001(\005\022\021"
      "\n\tposition3\030\003 \001(\005\022\021\n\tposition4\030\004 \001(\005\"$\n\007"
      "Battery\022\031\n\021batteryPercentage\030\001 \001(\r\".\n\025Ta"
      "rgetAcknowledgement\022\025\n\rtarget_status\030\001 \001"
      "(\r\"\241\001\n\030TargetDesignationCommand\022\022\n\nvehic"
      "le_id\030\001 \001(\r\022\022\n\npayload_id\030\002 \001(\r\022\021\n\ttarge"
      "t_id\030\003 \001(\r\022\023\n\013target_type\030\004 \001(\r\022\021\n\tlongi"
      "tude\030\005 \001(\002\022\020\n\010latitude\030\006 \001(\002\022\020\n\010altitude"
      "\030\007 \001(\002\"T\n\014TargetStatus\022\025\n\rtarget_radius\030"
      "\001 \001(\001\022\024\n\014target_angle\030\002 \001(\001\022\027\n\017target_al"
      "titude\030\003 \001(\001\"O\n\017VehicleAttitude\022\022\n\nvehic"
      "le_id\030\001 \001(\r\022\014\n\004roll\030\002 \001(\002\022\r\n\005pitch\030\003 \001(\002"
      "\022\013\n\003yaw\030\004 \001(\002\"|\n\031VehicleAuthorizationRep"
      "ly\022\022\n\nvehicle_id\030\001 \001(\r\022\024\n\014vehicle_type\030\002"
      " \001(\r\022\033\n\023authorized_services\030\003 \001(\r\022\030\n\020gra"
      "nted_services\030\004 \001(\r\"~\n\033VehicleAuthorizat"
      "ionRequest\022\022\n\nvehicle_id\030\001 \001(\r\022\024\n\014vehicl"
      "e_type\030\002 \001(\r\022\033\n\023authorized_services\030\003 \001("
      "\r\022\030\n\020granted_services\030\004 \001(\r\"\230\001\n\026VehicleB"
      "odySensedState\022\022\n\nvehicle_id\030\001 \001(\r\022\017\n\007x_"
      "accel\030\002 \001(\002\022\017\n\007y_accel\030\003 \001(\002\022\017\n\007z_accel\030"
      "\004 \001(\002\022\021\n\troll_rate\030\005 \001(\002\022\022\n\npitch_rate\030\006"
      " \001(\002\022\020\n\010yaw_rate\030\007 \001(\002\"\225\001\n\025VehicleGlobal"
      "Position\022\022\n\nvehicle_id\030\001 \001(\r\022\021\n\tlongitud"
      "e\030\002 \001(\002\022\020\n\010latitude\030\003 \001(\002\022\020\n\010altitude\030\004 "
      "\001(\002\022\017\n\007x_speed\030\005 \001(\002\022\017\n\007y_speed\030\006 \001(\002\022\017\n"
      "\007z_speed\030\007 \001(\002\"A\n\025VehicleIdentification\022"
      "\022\n\nvehicle_id\030\001 \001(\r\022\024\n\014vehicle_type\030\002 \001("
      "\r\"\312\002\n\024VehicleInertialState\022\022\n\nvehicle_id"
      "\030\001 \001(\r\022\021\n\tlongitude\030\002 \001(\002\022\020\n\010latitude\030\003 "
      "\001(\002\022\020\n\010altitude\030\004 \001(\002\022\014\n\004roll\030\005 \001(\002\022\r\n\005p"
      "itch\030\006 \001(\002\022\017\n\007heading\030\007 \001(\002\022\023\n\013north_spe"
      "ed\030\010 \001(\002\022\022\n\neast_speed\030\t \001(\002\022\026\n\016vertical"
      "_speed\030\n \001(\002\022\021\n\troll_rate\030\013 \001(\002\022\022\n\npitch"
      "_rate\030\014 \001(\002\022\020\n\010yaw_rate\030\r \001(\002\022\023\n\013north_a"
      "ccel\030\016 \001(\002\022\022\n\neast_accel\030\017 \001(\002\022\026\n\016vertic"
      "al_accel\030\020 \001(\002\">\n\022VehicleModeCommand\022\022\n\n"
      "vehicle_id\030\001 \001(\r\022\024\n\014vehicle_mode\030\002 \001(\r\"V"
      "\n\023VehicleSystemStatus\022\022\n\nvehicle_id\030\001 \001("
      "\r\022\024\n\014vehicle_mode\030\002 \001(\r\022\025\n\rvehicle_state"
      "\030\003 \001(\r\"_\n\027VehicleTelemetryCommand\022\022\n\nveh"
      "icle_id\030\001 \001(\r\022\030\n\020telemetry_select\030\002 \001(\r\022"
      "\026\n\016telemetry_rate\030\003 \001(\r\"I\n\031VehicleTermin"
      "ationCommand\022\022\n\nvehicle_id\030\001 \001(\r\022\030\n\020term"
      "ination_mode\030\002 \001(\r\"c\n\026VehicleWaypointCom"
      "mand\022\022\n\nvehicle_id\030\001 \001(\r\022\021\n\tlongitude\030\002 "
      "\001(\002\022\020\n\010latitude\030\003 \001(\002\022\020\n\010altitude\030\004 \001(\002b"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2287);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoPackets.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ProtoPackets_2eproto

// ===================================================================

void AirVehicleGroundRelativeState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AirVehicleGroundRelativeState::kVehicleIdFieldNumber;
const int AirVehicleGroundRelativeState::kAngleOfAttackFieldNumber;
const int AirVehicleGroundRelativeState::kAngleOfSideslipFieldNumber;
const int AirVehicleGroundRelativeState::kTrueAirspeedFieldNumber;
const int AirVehicleGroundRelativeState::kIndicatedAirspeedFieldNumber;
const int AirVehicleGroundRelativeState::kNorthWindSpeedFieldNumber;
const int AirVehicleGroundRelativeState::kEastWindSpeedFieldNumber;
const int AirVehicleGroundRelativeState::kNorthGroundSpeedFieldNumber;
const int AirVehicleGroundRelativeState::kEastGroundSpeedFieldNumber;
const int AirVehicleGroundRelativeState::kBarometricPressureFieldNumber;
const int AirVehicleGroundRelativeState::kBarometricAltitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AirVehicleGroundRelativeState::AirVehicleGroundRelativeState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoPackets_2eproto::InitDefaultsAirVehicleGroundRelativeState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AirVehicleGroundRelativeState)
}
AirVehicleGroundRelativeState::AirVehicleGroundRelativeState(const AirVehicleGroundRelativeState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_id_, &from.vehicle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&barometric_altitude_) -
    reinterpret_cast<char*>(&vehicle_id_)) + sizeof(barometric_altitude_));
  // @@protoc_insertion_point(copy_constructor:AirVehicleGroundRelativeState)
}

void AirVehicleGroundRelativeState::SharedCtor() {
  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&barometric_altitude_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(barometric_altitude_));
  _cached_size_ = 0;
}

AirVehicleGroundRelativeState::~AirVehicleGroundRelativeState() {
  // @@protoc_insertion_point(destructor:AirVehicleGroundRelativeState)
  SharedDtor();
}

void AirVehicleGroundRelativeState::SharedDtor() {
}

void AirVehicleGroundRelativeState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AirVehicleGroundRelativeState::descriptor() {
  ::protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AirVehicleGroundRelativeState& AirVehicleGroundRelativeState::default_instance() {
  ::protobuf_ProtoPackets_2eproto::InitDefaultsAirVehicleGroundRelativeState();
  return *internal_default_instance();
}

AirVehicleGroundRelativeState* AirVehicleGroundRelativeState::New(::google::protobuf::Arena* arena) const {
  AirVehicleGroundRelativeState* n = new AirVehicleGroundRelativeState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AirVehicleGroundRelativeState::Clear() {
// @@protoc_insertion_point(message_clear_start:AirVehicleGroundRelativeState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&barometric_altitude_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(barometric_altitude_));
  _internal_metadata_.Clear();
}

bool AirVehicleGroundRelativeState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AirVehicleGroundRelativeState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 vehicle_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle_of_attack = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_of_attack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle_of_sideslip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_of_sideslip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float true_airspeed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &true_airspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float indicated_airspeed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &indicated_airspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float north_wind_speed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &north_wind_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float east_wind_speed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &east_wind_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float north_ground_speed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &north_ground_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float east_ground_speed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &east_ground_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float barometric_pressure = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &barometric_pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float barometric_altitude = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &barometric_altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AirVehicleGroundRelativeState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AirVehicleGroundRelativeState)
  return false;
#undef DO_
}

void AirVehicleGroundRelativeState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AirVehicleGroundRelativeState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vehicle_id(), output);
  }

  // float angle_of_attack = 2;
  if (this->angle_of_attack() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angle_of_attack(), output);
  }

  // float angle_of_sideslip = 3;
  if (this->angle_of_sideslip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle_of_sideslip(), output);
  }

  // float true_airspeed = 4;
  if (this->true_airspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->true_airspeed(), output);
  }

  // float indicated_airspeed = 5;
  if (this->indicated_airspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->indicated_airspeed(), output);
  }

  // float north_wind_speed = 6;
  if (this->north_wind_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->north_wind_speed(), output);
  }

  // float east_wind_speed = 7;
  if (this->east_wind_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->east_wind_speed(), output);
  }

  // float north_ground_speed = 8;
  if (this->north_ground_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->north_ground_speed(), output);
  }

  // float east_ground_speed = 9;
  if (this->east_ground_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->east_ground_speed(), output);
  }

  // float barometric_pressure = 10;
  if (this->barometric_pressure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->barometric_pressure(), output);
  }

  // float barometric_altitude = 11;
  if (this->barometric_altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->barometric_altitude(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AirVehicleGroundRelativeState)
}

::google::protobuf::uint8* AirVehicleGroundRelativeState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AirVehicleGroundRelativeState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vehicle_id(), target);
  }

  // float angle_of_attack = 2;
  if (this->angle_of_attack() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angle_of_attack(), target);
  }

  // float angle_of_sideslip = 3;
  if (this->angle_of_sideslip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle_of_sideslip(), target);
  }

  // float true_airspeed = 4;
  if (this->true_airspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->true_airspeed(), target);
  }

  // float indicated_airspeed = 5;
  if (this->indicated_airspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->indicated_airspeed(), target);
  }

  // float north_wind_speed = 6;
  if (this->north_wind_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->north_wind_speed(), target);
  }

  // float east_wind_speed = 7;
  if (this->east_wind_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->east_wind_speed(), target);
  }

  // float north_ground_speed = 8;
  if (this->north_ground_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->north_ground_speed(), target);
  }

  // float east_ground_speed = 9;
  if (this->east_ground_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->east_ground_speed(), target);
  }

  // float barometric_pressure = 10;
  if (this->barometric_pressure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->barometric_pressure(), target);
  }

  // float barometric_altitude = 11;
  if (this->barometric_altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->barometric_altitude(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AirVehicleGroundRelativeState)
  return target;
}

size_t AirVehicleGroundRelativeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AirVehicleGroundRelativeState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_id());
  }

  // float angle_of_attack = 2;
  if (this->angle_of_attack() != 0) {
    total_size += 1 + 4;
  }

  // float angle_of_sideslip = 3;
  if (this->angle_of_sideslip() != 0) {
    total_size += 1 + 4;
  }

  // float true_airspeed = 4;
  if (this->true_airspeed() != 0) {
    total_size += 1 + 4;
  }

  // float indicated_airspeed = 5;
  if (this->indicated_airspeed() != 0) {
    total_size += 1 + 4;
  }

  // float north_wind_speed = 6;
  if (this->north_wind_speed() != 0) {
    total_size += 1 + 4;
  }

  // float east_wind_speed = 7;
  if (this->east_wind_speed() != 0) {
    total_size += 1 + 4;
  }

  // float north_ground_speed = 8;
  if (this->north_ground_speed() != 0) {
    total_size += 1 + 4;
  }

  // float east_ground_speed = 9;
  if (this->east_ground_speed() != 0) {
    total_size += 1 + 4;
  }

  // float barometric_pressure = 10;
  if (this->barometric_pressure() != 0) {
    total_size += 1 + 4;
  }

  // float barometric_altitude = 11;
  if (this->barometric_altitude() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AirVehicleGroundRelativeState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AirVehicleGroundRelativeState)
  GOOGLE_DCHECK_NE(&from, this);
  const AirVehicleGroundRelativeState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AirVehicleGroundRelativeState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AirVehicleGroundRelativeState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AirVehicleGroundRelativeState)
    MergeFrom(*source);
  }
}

void AirVehicleGroundRelativeState::MergeFrom(const AirVehicleGroundRelativeState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AirVehicleGroundRelativeState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_id() != 0) {
    set_vehicle_id(from.vehicle_id());
  }
  if (from.angle_of_attack() != 0) {
    set_angle_of_attack(from.angle_of_attack());
  }
  if (from.angle_of_sideslip() != 0) {
    set_angle_of_sideslip(from.angle_of_sideslip());
  }
  if (from.true_airspeed() != 0) {
    set_true_airspeed(from.true_airspeed());
  }
  if (from.indicated_airspeed() != 0) {
    set_indicated_airspeed(from.indicated_airspeed());
  }
  if (from.north_wind_speed() != 0) {
    set_north_wind_speed(from.north_wind_speed());
  }
  if (from.east_wind_speed() != 0) {
    set_east_wind_speed(from.east_wind_speed());
  }
  if (from.north_ground_speed() != 0) {
    set_north_ground_speed(from.north_ground_speed());
  }
  if (from.east_ground_speed() != 0) {
    set_east_ground_speed(from.east_ground_speed());
  }
  if (from.barometric_pressure() != 0) {
    set_barometric_pressure(from.barometric_pressure());
  }
  if (from.barometric_altitude() != 0) {
    set_barometric_altitude(from.barometric_altitude());
  }
}

void AirVehicleGroundRelativeState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AirVehicleGroundRelativeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AirVehicleGroundRelativeState::CopyFrom(const AirVehicleGroundRelativeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AirVehicleGroundRelativeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AirVehicleGroundRelativeState::IsInitialized() const {
  return true;
}

void AirVehicleGroundRelativeState::Swap(AirVehicleGroundRelativeState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AirVehicleGroundRelativeState::InternalSwap(AirVehicleGroundRelativeState* other) {
  using std::swap;
  swap(vehicle_id_, other->vehicle_id_);
  swap(angle_of_attack_, other->angle_of_attack_);
  swap(angle_of_sideslip_, other->angle_of_sideslip_);
  swap(true_airspeed_, other->true_airspeed_);
  swap(indicated_airspeed_, other->indicated_airspeed_);
  swap(north_wind_speed_, other->north_wind_speed_);
  swap(east_wind_speed_, other->east_wind_speed_);
  swap(north_ground_speed_, other->north_ground_speed_);
  swap(east_ground_speed_, other->east_ground_speed_);
  swap(barometric_pressure_, other->barometric_pressure_);
  swap(barometric_altitude_, other->barometric_altitude_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AirVehicleGroundRelativeState::GetMetadata() const {
  protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ArmCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArmCommand::kIdFieldNumber;
const int ArmCommand::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArmCommand::ArmCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoPackets_2eproto::InitDefaultsArmCommand();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ArmCommand)
}
ArmCommand::ArmCommand(const ArmCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&id_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:ArmCommand)
}

void ArmCommand::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&id_)) + sizeof(position_));
  _cached_size_ = 0;
}

ArmCommand::~ArmCommand() {
  // @@protoc_insertion_point(destructor:ArmCommand)
  SharedDtor();
}

void ArmCommand::SharedDtor() {
}

void ArmCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArmCommand::descriptor() {
  ::protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ArmCommand& ArmCommand::default_instance() {
  ::protobuf_ProtoPackets_2eproto::InitDefaultsArmCommand();
  return *internal_default_instance();
}

ArmCommand* ArmCommand::New(::google::protobuf::Arena* arena) const {
  ArmCommand* n = new ArmCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArmCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&id_)) + sizeof(position_));
  _internal_metadata_.Clear();
}

bool ArmCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ArmCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ArmCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ArmCommand)
  return false;
#undef DO_
}

void ArmCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ArmCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // int32 position = 2;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ArmCommand)
}

::google::protobuf::uint8* ArmCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ArmCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // int32 position = 2;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmCommand)
  return target;
}

size_t ArmCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // int32 position = 2;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArmCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ArmCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ArmCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ArmCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ArmCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ArmCommand)
    MergeFrom(*source);
  }
}

void ArmCommand::MergeFrom(const ArmCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
}

void ArmCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ArmCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmCommand::CopyFrom(const ArmCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmCommand::IsInitialized() const {
  return true;
}

void ArmCommand::Swap(ArmCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArmCommand::InternalSwap(ArmCommand* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(position_, other->position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArmCommand::GetMetadata() const {
  protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ArmPosition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArmPosition::kPosition1FieldNumber;
const int ArmPosition::kPosition2FieldNumber;
const int ArmPosition::kPosition3FieldNumber;
const int ArmPosition::kPosition4FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArmPosition::ArmPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoPackets_2eproto::InitDefaultsArmPosition();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ArmPosition)
}
ArmPosition::ArmPosition(const ArmPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&position1_, &from.position1_,
    static_cast<size_t>(reinterpret_cast<char*>(&position4_) -
    reinterpret_cast<char*>(&position1_)) + sizeof(position4_));
  // @@protoc_insertion_point(copy_constructor:ArmPosition)
}

void ArmPosition::SharedCtor() {
  ::memset(&position1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position4_) -
      reinterpret_cast<char*>(&position1_)) + sizeof(position4_));
  _cached_size_ = 0;
}

ArmPosition::~ArmPosition() {
  // @@protoc_insertion_point(destructor:ArmPosition)
  SharedDtor();
}

void ArmPosition::SharedDtor() {
}

void ArmPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArmPosition::descriptor() {
  ::protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ArmPosition& ArmPosition::default_instance() {
  ::protobuf_ProtoPackets_2eproto::InitDefaultsArmPosition();
  return *internal_default_instance();
}

ArmPosition* ArmPosition::New(::google::protobuf::Arena* arena) const {
  ArmPosition* n = new ArmPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArmPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&position1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position4_) -
      reinterpret_cast<char*>(&position1_)) + sizeof(position4_));
  _internal_metadata_.Clear();
}

bool ArmPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ArmPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 position1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 position2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 position3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 position4 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ArmPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ArmPosition)
  return false;
#undef DO_
}

void ArmPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ArmPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 position1 = 1;
  if (this->position1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->position1(), output);
  }

  // int32 position2 = 2;
  if (this->position2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position2(), output);
  }

  // int32 position3 = 3;
  if (this->position3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->position3(), output);
  }

  // int32 position4 = 4;
  if (this->position4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->position4(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ArmPosition)
}

::google::protobuf::uint8* ArmPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ArmPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 position1 = 1;
  if (this->position1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->position1(), target);
  }

  // int32 position2 = 2;
  if (this->position2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position2(), target);
  }

  // int32 position3 = 3;
  if (this->position3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->position3(), target);
  }

  // int32 position4 = 4;
  if (this->position4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->position4(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmPosition)
  return target;
}

size_t ArmPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmPosition)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 position1 = 1;
  if (this->position1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position1());
  }

  // int32 position2 = 2;
  if (this->position2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position2());
  }

  // int32 position3 = 3;
  if (this->position3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position3());
  }

  // int32 position4 = 4;
  if (this->position4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position4());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArmPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ArmPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const ArmPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ArmPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ArmPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ArmPosition)
    MergeFrom(*source);
  }
}

void ArmPosition::MergeFrom(const ArmPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.position1() != 0) {
    set_position1(from.position1());
  }
  if (from.position2() != 0) {
    set_position2(from.position2());
  }
  if (from.position3() != 0) {
    set_position3(from.position3());
  }
  if (from.position4() != 0) {
    set_position4(from.position4());
  }
}

void ArmPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ArmPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmPosition::CopyFrom(const ArmPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmPosition::IsInitialized() const {
  return true;
}

void ArmPosition::Swap(ArmPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArmPosition::InternalSwap(ArmPosition* other) {
  using std::swap;
  swap(position1_, other->position1_);
  swap(position2_, other->position2_);
  swap(position3_, other->position3_);
  swap(position4_, other->position4_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArmPosition::GetMetadata() const {
  protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Battery::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Battery::kBatteryPercentageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Battery::Battery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoPackets_2eproto::InitDefaultsBattery();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battery)
}
Battery::Battery(const Battery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  batterypercentage_ = from.batterypercentage_;
  // @@protoc_insertion_point(copy_constructor:Battery)
}

void Battery::SharedCtor() {
  batterypercentage_ = 0u;
  _cached_size_ = 0;
}

Battery::~Battery() {
  // @@protoc_insertion_point(destructor:Battery)
  SharedDtor();
}

void Battery::SharedDtor() {
}

void Battery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battery::descriptor() {
  ::protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Battery& Battery::default_instance() {
  ::protobuf_ProtoPackets_2eproto::InitDefaultsBattery();
  return *internal_default_instance();
}

Battery* Battery::New(::google::protobuf::Arena* arena) const {
  Battery* n = new Battery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:Battery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  batterypercentage_ = 0u;
  _internal_metadata_.Clear();
}

bool Battery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 batteryPercentage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batterypercentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battery)
  return false;
#undef DO_
}

void Battery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 batteryPercentage = 1;
  if (this->batterypercentage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->batterypercentage(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Battery)
}

::google::protobuf::uint8* Battery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Battery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 batteryPercentage = 1;
  if (this->batterypercentage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->batterypercentage(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battery)
  return target;
}

size_t Battery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Battery)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 batteryPercentage = 1;
  if (this->batterypercentage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->batterypercentage());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Battery)
  GOOGLE_DCHECK_NE(&from, this);
  const Battery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Battery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Battery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Battery)
    MergeFrom(*source);
  }
}

void Battery::MergeFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Battery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.batterypercentage() != 0) {
    set_batterypercentage(from.batterypercentage());
  }
}

void Battery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battery::CopyFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battery::IsInitialized() const {
  return true;
}

void Battery::Swap(Battery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Battery::InternalSwap(Battery* other) {
  using std::swap;
  swap(batterypercentage_, other->batterypercentage_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Battery::GetMetadata() const {
  protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TargetAcknowledgement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetAcknowledgement::kTargetStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetAcknowledgement::TargetAcknowledgement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoPackets_2eproto::InitDefaultsTargetAcknowledgement();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TargetAcknowledgement)
}
TargetAcknowledgement::TargetAcknowledgement(const TargetAcknowledgement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_status_ = from.target_status_;
  // @@protoc_insertion_point(copy_constructor:TargetAcknowledgement)
}

void TargetAcknowledgement::SharedCtor() {
  target_status_ = 0u;
  _cached_size_ = 0;
}

TargetAcknowledgement::~TargetAcknowledgement() {
  // @@protoc_insertion_point(destructor:TargetAcknowledgement)
  SharedDtor();
}

void TargetAcknowledgement::SharedDtor() {
}

void TargetAcknowledgement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetAcknowledgement::descriptor() {
  ::protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TargetAcknowledgement& TargetAcknowledgement::default_instance() {
  ::protobuf_ProtoPackets_2eproto::InitDefaultsTargetAcknowledgement();
  return *internal_default_instance();
}

TargetAcknowledgement* TargetAcknowledgement::New(::google::protobuf::Arena* arena) const {
  TargetAcknowledgement* n = new TargetAcknowledgement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetAcknowledgement::Clear() {
// @@protoc_insertion_point(message_clear_start:TargetAcknowledgement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_status_ = 0u;
  _internal_metadata_.Clear();
}

bool TargetAcknowledgement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TargetAcknowledgement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 target_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TargetAcknowledgement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TargetAcknowledgement)
  return false;
#undef DO_
}

void TargetAcknowledgement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TargetAcknowledgement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_status = 1;
  if (this->target_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:TargetAcknowledgement)
}

::google::protobuf::uint8* TargetAcknowledgement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TargetAcknowledgement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_status = 1;
  if (this->target_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TargetAcknowledgement)
  return target;
}

size_t TargetAcknowledgement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TargetAcknowledgement)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 target_status = 1;
  if (this->target_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetAcknowledgement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TargetAcknowledgement)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetAcknowledgement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetAcknowledgement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TargetAcknowledgement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TargetAcknowledgement)
    MergeFrom(*source);
  }
}

void TargetAcknowledgement::MergeFrom(const TargetAcknowledgement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TargetAcknowledgement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_status() != 0) {
    set_target_status(from.target_status());
  }
}

void TargetAcknowledgement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TargetAcknowledgement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetAcknowledgement::CopyFrom(const TargetAcknowledgement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TargetAcknowledgement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetAcknowledgement::IsInitialized() const {
  return true;
}

void TargetAcknowledgement::Swap(TargetAcknowledgement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetAcknowledgement::InternalSwap(TargetAcknowledgement* other) {
  using std::swap;
  swap(target_status_, other->target_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetAcknowledgement::GetMetadata() const {
  protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TargetDesignationCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetDesignationCommand::kVehicleIdFieldNumber;
const int TargetDesignationCommand::kPayloadIdFieldNumber;
const int TargetDesignationCommand::kTargetIdFieldNumber;
const int TargetDesignationCommand::kTargetTypeFieldNumber;
const int TargetDesignationCommand::kLongitudeFieldNumber;
const int TargetDesignationCommand::kLatitudeFieldNumber;
const int TargetDesignationCommand::kAltitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetDesignationCommand::TargetDesignationCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoPackets_2eproto::InitDefaultsTargetDesignationCommand();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TargetDesignationCommand)
}
TargetDesignationCommand::TargetDesignationCommand(const TargetDesignationCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_id_, &from.vehicle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&vehicle_id_)) + sizeof(altitude_));
  // @@protoc_insertion_point(copy_constructor:TargetDesignationCommand)
}

void TargetDesignationCommand::SharedCtor() {
  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(altitude_));
  _cached_size_ = 0;
}

TargetDesignationCommand::~TargetDesignationCommand() {
  // @@protoc_insertion_point(destructor:TargetDesignationCommand)
  SharedDtor();
}

void TargetDesignationCommand::SharedDtor() {
}

void TargetDesignationCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetDesignationCommand::descriptor() {
  ::protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TargetDesignationCommand& TargetDesignationCommand::default_instance() {
  ::protobuf_ProtoPackets_2eproto::InitDefaultsTargetDesignationCommand();
  return *internal_default_instance();
}

TargetDesignationCommand* TargetDesignationCommand::New(::google::protobuf::Arena* arena) const {
  TargetDesignationCommand* n = new TargetDesignationCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetDesignationCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:TargetDesignationCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(altitude_));
  _internal_metadata_.Clear();
}

bool TargetDesignationCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TargetDesignationCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 vehicle_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 payload_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float longitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float latitude = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float altitude = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TargetDesignationCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TargetDesignationCommand)
  return false;
#undef DO_
}

void TargetDesignationCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TargetDesignationCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vehicle_id(), output);
  }

  // uint32 payload_id = 2;
  if (this->payload_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->payload_id(), output);
  }

  // uint32 target_id = 3;
  if (this->target_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_id(), output);
  }

  // uint32 target_type = 4;
  if (this->target_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->target_type(), output);
  }

  // float longitude = 5;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->longitude(), output);
  }

  // float latitude = 6;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->latitude(), output);
  }

  // float altitude = 7;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->altitude(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:TargetDesignationCommand)
}

::google::protobuf::uint8* TargetDesignationCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TargetDesignationCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vehicle_id(), target);
  }

  // uint32 payload_id = 2;
  if (this->payload_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->payload_id(), target);
  }

  // uint32 target_id = 3;
  if (this->target_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_id(), target);
  }

  // uint32 target_type = 4;
  if (this->target_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->target_type(), target);
  }

  // float longitude = 5;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->longitude(), target);
  }

  // float latitude = 6;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->latitude(), target);
  }

  // float altitude = 7;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->altitude(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TargetDesignationCommand)
  return target;
}

size_t TargetDesignationCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TargetDesignationCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_id());
  }

  // uint32 payload_id = 2;
  if (this->payload_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->payload_id());
  }

  // uint32 target_id = 3;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_id());
  }

  // uint32 target_type = 4;
  if (this->target_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_type());
  }

  // float longitude = 5;
  if (this->longitude() != 0) {
    total_size += 1 + 4;
  }

  // float latitude = 6;
  if (this->latitude() != 0) {
    total_size += 1 + 4;
  }

  // float altitude = 7;
  if (this->altitude() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetDesignationCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TargetDesignationCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetDesignationCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetDesignationCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TargetDesignationCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TargetDesignationCommand)
    MergeFrom(*source);
  }
}

void TargetDesignationCommand::MergeFrom(const TargetDesignationCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TargetDesignationCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_id() != 0) {
    set_vehicle_id(from.vehicle_id());
  }
  if (from.payload_id() != 0) {
    set_payload_id(from.payload_id());
  }
  if (from.target_id() != 0) {
    set_target_id(from.target_id());
  }
  if (from.target_type() != 0) {
    set_target_type(from.target_type());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
}

void TargetDesignationCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TargetDesignationCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetDesignationCommand::CopyFrom(const TargetDesignationCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TargetDesignationCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetDesignationCommand::IsInitialized() const {
  return true;
}

void TargetDesignationCommand::Swap(TargetDesignationCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetDesignationCommand::InternalSwap(TargetDesignationCommand* other) {
  using std::swap;
  swap(vehicle_id_, other->vehicle_id_);
  swap(payload_id_, other->payload_id_);
  swap(target_id_, other->target_id_);
  swap(target_type_, other->target_type_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(altitude_, other->altitude_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetDesignationCommand::GetMetadata() const {
  protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TargetStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetStatus::kTargetRadiusFieldNumber;
const int TargetStatus::kTargetAngleFieldNumber;
const int TargetStatus::kTargetAltitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetStatus::TargetStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoPackets_2eproto::InitDefaultsTargetStatus();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TargetStatus)
}
TargetStatus::TargetStatus(const TargetStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_radius_, &from.target_radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_altitude_) -
    reinterpret_cast<char*>(&target_radius_)) + sizeof(target_altitude_));
  // @@protoc_insertion_point(copy_constructor:TargetStatus)
}

void TargetStatus::SharedCtor() {
  ::memset(&target_radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_altitude_) -
      reinterpret_cast<char*>(&target_radius_)) + sizeof(target_altitude_));
  _cached_size_ = 0;
}

TargetStatus::~TargetStatus() {
  // @@protoc_insertion_point(destructor:TargetStatus)
  SharedDtor();
}

void TargetStatus::SharedDtor() {
}

void TargetStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetStatus::descriptor() {
  ::protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TargetStatus& TargetStatus::default_instance() {
  ::protobuf_ProtoPackets_2eproto::InitDefaultsTargetStatus();
  return *internal_default_instance();
}

TargetStatus* TargetStatus::New(::google::protobuf::Arena* arena) const {
  TargetStatus* n = new TargetStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:TargetStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_altitude_) -
      reinterpret_cast<char*>(&target_radius_)) + sizeof(target_altitude_));
  _internal_metadata_.Clear();
}

bool TargetStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TargetStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double target_radius = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &target_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double target_angle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &target_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double target_altitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &target_altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TargetStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TargetStatus)
  return false;
#undef DO_
}

void TargetStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TargetStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double target_radius = 1;
  if (this->target_radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->target_radius(), output);
  }

  // double target_angle = 2;
  if (this->target_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->target_angle(), output);
  }

  // double target_altitude = 3;
  if (this->target_altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->target_altitude(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:TargetStatus)
}

::google::protobuf::uint8* TargetStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TargetStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double target_radius = 1;
  if (this->target_radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->target_radius(), target);
  }

  // double target_angle = 2;
  if (this->target_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->target_angle(), target);
  }

  // double target_altitude = 3;
  if (this->target_altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->target_altitude(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TargetStatus)
  return target;
}

size_t TargetStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TargetStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double target_radius = 1;
  if (this->target_radius() != 0) {
    total_size += 1 + 8;
  }

  // double target_angle = 2;
  if (this->target_angle() != 0) {
    total_size += 1 + 8;
  }

  // double target_altitude = 3;
  if (this->target_altitude() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TargetStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TargetStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TargetStatus)
    MergeFrom(*source);
  }
}

void TargetStatus::MergeFrom(const TargetStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TargetStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_radius() != 0) {
    set_target_radius(from.target_radius());
  }
  if (from.target_angle() != 0) {
    set_target_angle(from.target_angle());
  }
  if (from.target_altitude() != 0) {
    set_target_altitude(from.target_altitude());
  }
}

void TargetStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TargetStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetStatus::CopyFrom(const TargetStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TargetStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetStatus::IsInitialized() const {
  return true;
}

void TargetStatus::Swap(TargetStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetStatus::InternalSwap(TargetStatus* other) {
  using std::swap;
  swap(target_radius_, other->target_radius_);
  swap(target_angle_, other->target_angle_);
  swap(target_altitude_, other->target_altitude_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetStatus::GetMetadata() const {
  protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleAttitude::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleAttitude::kVehicleIdFieldNumber;
const int VehicleAttitude::kRollFieldNumber;
const int VehicleAttitude::kPitchFieldNumber;
const int VehicleAttitude::kYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleAttitude::VehicleAttitude()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleAttitude();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:VehicleAttitude)
}
VehicleAttitude::VehicleAttitude(const VehicleAttitude& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_id_, &from.vehicle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&vehicle_id_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:VehicleAttitude)
}

void VehicleAttitude::SharedCtor() {
  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(yaw_));
  _cached_size_ = 0;
}

VehicleAttitude::~VehicleAttitude() {
  // @@protoc_insertion_point(destructor:VehicleAttitude)
  SharedDtor();
}

void VehicleAttitude::SharedDtor() {
}

void VehicleAttitude::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleAttitude::descriptor() {
  ::protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleAttitude& VehicleAttitude::default_instance() {
  ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleAttitude();
  return *internal_default_instance();
}

VehicleAttitude* VehicleAttitude::New(::google::protobuf::Arena* arena) const {
  VehicleAttitude* n = new VehicleAttitude;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleAttitude::Clear() {
// @@protoc_insertion_point(message_clear_start:VehicleAttitude)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(yaw_));
  _internal_metadata_.Clear();
}

bool VehicleAttitude::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VehicleAttitude)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 vehicle_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VehicleAttitude)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VehicleAttitude)
  return false;
#undef DO_
}

void VehicleAttitude::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VehicleAttitude)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vehicle_id(), output);
  }

  // float roll = 2;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->roll(), output);
  }

  // float pitch = 3;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pitch(), output);
  }

  // float yaw = 4;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yaw(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:VehicleAttitude)
}

::google::protobuf::uint8* VehicleAttitude::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:VehicleAttitude)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vehicle_id(), target);
  }

  // float roll = 2;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->roll(), target);
  }

  // float pitch = 3;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pitch(), target);
  }

  // float yaw = 4;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->yaw(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VehicleAttitude)
  return target;
}

size_t VehicleAttitude::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VehicleAttitude)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_id());
  }

  // float roll = 2;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 3;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 4;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleAttitude::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VehicleAttitude)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleAttitude* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleAttitude>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VehicleAttitude)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VehicleAttitude)
    MergeFrom(*source);
  }
}

void VehicleAttitude::MergeFrom(const VehicleAttitude& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VehicleAttitude)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_id() != 0) {
    set_vehicle_id(from.vehicle_id());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
}

void VehicleAttitude::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VehicleAttitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleAttitude::CopyFrom(const VehicleAttitude& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VehicleAttitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleAttitude::IsInitialized() const {
  return true;
}

void VehicleAttitude::Swap(VehicleAttitude* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleAttitude::InternalSwap(VehicleAttitude* other) {
  using std::swap;
  swap(vehicle_id_, other->vehicle_id_);
  swap(roll_, other->roll_);
  swap(pitch_, other->pitch_);
  swap(yaw_, other->yaw_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleAttitude::GetMetadata() const {
  protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleAuthorizationReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleAuthorizationReply::kVehicleIdFieldNumber;
const int VehicleAuthorizationReply::kVehicleTypeFieldNumber;
const int VehicleAuthorizationReply::kAuthorizedServicesFieldNumber;
const int VehicleAuthorizationReply::kGrantedServicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleAuthorizationReply::VehicleAuthorizationReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleAuthorizationReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:VehicleAuthorizationReply)
}
VehicleAuthorizationReply::VehicleAuthorizationReply(const VehicleAuthorizationReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_id_, &from.vehicle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&granted_services_) -
    reinterpret_cast<char*>(&vehicle_id_)) + sizeof(granted_services_));
  // @@protoc_insertion_point(copy_constructor:VehicleAuthorizationReply)
}

void VehicleAuthorizationReply::SharedCtor() {
  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&granted_services_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(granted_services_));
  _cached_size_ = 0;
}

VehicleAuthorizationReply::~VehicleAuthorizationReply() {
  // @@protoc_insertion_point(destructor:VehicleAuthorizationReply)
  SharedDtor();
}

void VehicleAuthorizationReply::SharedDtor() {
}

void VehicleAuthorizationReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleAuthorizationReply::descriptor() {
  ::protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleAuthorizationReply& VehicleAuthorizationReply::default_instance() {
  ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleAuthorizationReply();
  return *internal_default_instance();
}

VehicleAuthorizationReply* VehicleAuthorizationReply::New(::google::protobuf::Arena* arena) const {
  VehicleAuthorizationReply* n = new VehicleAuthorizationReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleAuthorizationReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VehicleAuthorizationReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&granted_services_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(granted_services_));
  _internal_metadata_.Clear();
}

bool VehicleAuthorizationReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VehicleAuthorizationReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 vehicle_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vehicle_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 authorized_services = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &authorized_services_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 granted_services = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &granted_services_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VehicleAuthorizationReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VehicleAuthorizationReply)
  return false;
#undef DO_
}

void VehicleAuthorizationReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VehicleAuthorizationReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vehicle_id(), output);
  }

  // uint32 vehicle_type = 2;
  if (this->vehicle_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vehicle_type(), output);
  }

  // uint32 authorized_services = 3;
  if (this->authorized_services() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->authorized_services(), output);
  }

  // uint32 granted_services = 4;
  if (this->granted_services() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->granted_services(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:VehicleAuthorizationReply)
}

::google::protobuf::uint8* VehicleAuthorizationReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:VehicleAuthorizationReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vehicle_id(), target);
  }

  // uint32 vehicle_type = 2;
  if (this->vehicle_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vehicle_type(), target);
  }

  // uint32 authorized_services = 3;
  if (this->authorized_services() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->authorized_services(), target);
  }

  // uint32 granted_services = 4;
  if (this->granted_services() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->granted_services(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VehicleAuthorizationReply)
  return target;
}

size_t VehicleAuthorizationReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VehicleAuthorizationReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_id());
  }

  // uint32 vehicle_type = 2;
  if (this->vehicle_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_type());
  }

  // uint32 authorized_services = 3;
  if (this->authorized_services() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->authorized_services());
  }

  // uint32 granted_services = 4;
  if (this->granted_services() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->granted_services());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleAuthorizationReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VehicleAuthorizationReply)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleAuthorizationReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleAuthorizationReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VehicleAuthorizationReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VehicleAuthorizationReply)
    MergeFrom(*source);
  }
}

void VehicleAuthorizationReply::MergeFrom(const VehicleAuthorizationReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VehicleAuthorizationReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_id() != 0) {
    set_vehicle_id(from.vehicle_id());
  }
  if (from.vehicle_type() != 0) {
    set_vehicle_type(from.vehicle_type());
  }
  if (from.authorized_services() != 0) {
    set_authorized_services(from.authorized_services());
  }
  if (from.granted_services() != 0) {
    set_granted_services(from.granted_services());
  }
}

void VehicleAuthorizationReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VehicleAuthorizationReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleAuthorizationReply::CopyFrom(const VehicleAuthorizationReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VehicleAuthorizationReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleAuthorizationReply::IsInitialized() const {
  return true;
}

void VehicleAuthorizationReply::Swap(VehicleAuthorizationReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleAuthorizationReply::InternalSwap(VehicleAuthorizationReply* other) {
  using std::swap;
  swap(vehicle_id_, other->vehicle_id_);
  swap(vehicle_type_, other->vehicle_type_);
  swap(authorized_services_, other->authorized_services_);
  swap(granted_services_, other->granted_services_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleAuthorizationReply::GetMetadata() const {
  protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleAuthorizationRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleAuthorizationRequest::kVehicleIdFieldNumber;
const int VehicleAuthorizationRequest::kVehicleTypeFieldNumber;
const int VehicleAuthorizationRequest::kAuthorizedServicesFieldNumber;
const int VehicleAuthorizationRequest::kGrantedServicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleAuthorizationRequest::VehicleAuthorizationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleAuthorizationRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:VehicleAuthorizationRequest)
}
VehicleAuthorizationRequest::VehicleAuthorizationRequest(const VehicleAuthorizationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_id_, &from.vehicle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&granted_services_) -
    reinterpret_cast<char*>(&vehicle_id_)) + sizeof(granted_services_));
  // @@protoc_insertion_point(copy_constructor:VehicleAuthorizationRequest)
}

void VehicleAuthorizationRequest::SharedCtor() {
  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&granted_services_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(granted_services_));
  _cached_size_ = 0;
}

VehicleAuthorizationRequest::~VehicleAuthorizationRequest() {
  // @@protoc_insertion_point(destructor:VehicleAuthorizationRequest)
  SharedDtor();
}

void VehicleAuthorizationRequest::SharedDtor() {
}

void VehicleAuthorizationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleAuthorizationRequest::descriptor() {
  ::protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleAuthorizationRequest& VehicleAuthorizationRequest::default_instance() {
  ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleAuthorizationRequest();
  return *internal_default_instance();
}

VehicleAuthorizationRequest* VehicleAuthorizationRequest::New(::google::protobuf::Arena* arena) const {
  VehicleAuthorizationRequest* n = new VehicleAuthorizationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleAuthorizationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:VehicleAuthorizationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&granted_services_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(granted_services_));
  _internal_metadata_.Clear();
}

bool VehicleAuthorizationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VehicleAuthorizationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 vehicle_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vehicle_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 authorized_services = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &authorized_services_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 granted_services = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &granted_services_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VehicleAuthorizationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VehicleAuthorizationRequest)
  return false;
#undef DO_
}

void VehicleAuthorizationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VehicleAuthorizationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vehicle_id(), output);
  }

  // uint32 vehicle_type = 2;
  if (this->vehicle_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vehicle_type(), output);
  }

  // uint32 authorized_services = 3;
  if (this->authorized_services() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->authorized_services(), output);
  }

  // uint32 granted_services = 4;
  if (this->granted_services() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->granted_services(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:VehicleAuthorizationRequest)
}

::google::protobuf::uint8* VehicleAuthorizationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:VehicleAuthorizationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vehicle_id(), target);
  }

  // uint32 vehicle_type = 2;
  if (this->vehicle_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vehicle_type(), target);
  }

  // uint32 authorized_services = 3;
  if (this->authorized_services() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->authorized_services(), target);
  }

  // uint32 granted_services = 4;
  if (this->granted_services() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->granted_services(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VehicleAuthorizationRequest)
  return target;
}

size_t VehicleAuthorizationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VehicleAuthorizationRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_id());
  }

  // uint32 vehicle_type = 2;
  if (this->vehicle_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_type());
  }

  // uint32 authorized_services = 3;
  if (this->authorized_services() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->authorized_services());
  }

  // uint32 granted_services = 4;
  if (this->granted_services() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->granted_services());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleAuthorizationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VehicleAuthorizationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleAuthorizationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleAuthorizationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VehicleAuthorizationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VehicleAuthorizationRequest)
    MergeFrom(*source);
  }
}

void VehicleAuthorizationRequest::MergeFrom(const VehicleAuthorizationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VehicleAuthorizationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_id() != 0) {
    set_vehicle_id(from.vehicle_id());
  }
  if (from.vehicle_type() != 0) {
    set_vehicle_type(from.vehicle_type());
  }
  if (from.authorized_services() != 0) {
    set_authorized_services(from.authorized_services());
  }
  if (from.granted_services() != 0) {
    set_granted_services(from.granted_services());
  }
}

void VehicleAuthorizationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VehicleAuthorizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleAuthorizationRequest::CopyFrom(const VehicleAuthorizationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VehicleAuthorizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleAuthorizationRequest::IsInitialized() const {
  return true;
}

void VehicleAuthorizationRequest::Swap(VehicleAuthorizationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleAuthorizationRequest::InternalSwap(VehicleAuthorizationRequest* other) {
  using std::swap;
  swap(vehicle_id_, other->vehicle_id_);
  swap(vehicle_type_, other->vehicle_type_);
  swap(authorized_services_, other->authorized_services_);
  swap(granted_services_, other->granted_services_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleAuthorizationRequest::GetMetadata() const {
  protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleBodySensedState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleBodySensedState::kVehicleIdFieldNumber;
const int VehicleBodySensedState::kXAccelFieldNumber;
const int VehicleBodySensedState::kYAccelFieldNumber;
const int VehicleBodySensedState::kZAccelFieldNumber;
const int VehicleBodySensedState::kRollRateFieldNumber;
const int VehicleBodySensedState::kPitchRateFieldNumber;
const int VehicleBodySensedState::kYawRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleBodySensedState::VehicleBodySensedState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleBodySensedState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:VehicleBodySensedState)
}
VehicleBodySensedState::VehicleBodySensedState(const VehicleBodySensedState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_id_, &from.vehicle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_rate_) -
    reinterpret_cast<char*>(&vehicle_id_)) + sizeof(yaw_rate_));
  // @@protoc_insertion_point(copy_constructor:VehicleBodySensedState)
}

void VehicleBodySensedState::SharedCtor() {
  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rate_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(yaw_rate_));
  _cached_size_ = 0;
}

VehicleBodySensedState::~VehicleBodySensedState() {
  // @@protoc_insertion_point(destructor:VehicleBodySensedState)
  SharedDtor();
}

void VehicleBodySensedState::SharedDtor() {
}

void VehicleBodySensedState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleBodySensedState::descriptor() {
  ::protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleBodySensedState& VehicleBodySensedState::default_instance() {
  ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleBodySensedState();
  return *internal_default_instance();
}

VehicleBodySensedState* VehicleBodySensedState::New(::google::protobuf::Arena* arena) const {
  VehicleBodySensedState* n = new VehicleBodySensedState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleBodySensedState::Clear() {
// @@protoc_insertion_point(message_clear_start:VehicleBodySensedState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rate_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(yaw_rate_));
  _internal_metadata_.Clear();
}

bool VehicleBodySensedState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VehicleBodySensedState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 vehicle_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x_accel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y_accel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z_accel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll_rate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch_rate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_rate = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VehicleBodySensedState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VehicleBodySensedState)
  return false;
#undef DO_
}

void VehicleBodySensedState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VehicleBodySensedState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vehicle_id(), output);
  }

  // float x_accel = 2;
  if (this->x_accel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x_accel(), output);
  }

  // float y_accel = 3;
  if (this->y_accel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y_accel(), output);
  }

  // float z_accel = 4;
  if (this->z_accel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z_accel(), output);
  }

  // float roll_rate = 5;
  if (this->roll_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->roll_rate(), output);
  }

  // float pitch_rate = 6;
  if (this->pitch_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pitch_rate(), output);
  }

  // float yaw_rate = 7;
  if (this->yaw_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->yaw_rate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:VehicleBodySensedState)
}

::google::protobuf::uint8* VehicleBodySensedState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:VehicleBodySensedState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vehicle_id(), target);
  }

  // float x_accel = 2;
  if (this->x_accel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x_accel(), target);
  }

  // float y_accel = 3;
  if (this->y_accel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y_accel(), target);
  }

  // float z_accel = 4;
  if (this->z_accel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->z_accel(), target);
  }

  // float roll_rate = 5;
  if (this->roll_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->roll_rate(), target);
  }

  // float pitch_rate = 6;
  if (this->pitch_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pitch_rate(), target);
  }

  // float yaw_rate = 7;
  if (this->yaw_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->yaw_rate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VehicleBodySensedState)
  return target;
}

size_t VehicleBodySensedState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VehicleBodySensedState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_id());
  }

  // float x_accel = 2;
  if (this->x_accel() != 0) {
    total_size += 1 + 4;
  }

  // float y_accel = 3;
  if (this->y_accel() != 0) {
    total_size += 1 + 4;
  }

  // float z_accel = 4;
  if (this->z_accel() != 0) {
    total_size += 1 + 4;
  }

  // float roll_rate = 5;
  if (this->roll_rate() != 0) {
    total_size += 1 + 4;
  }

  // float pitch_rate = 6;
  if (this->pitch_rate() != 0) {
    total_size += 1 + 4;
  }

  // float yaw_rate = 7;
  if (this->yaw_rate() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleBodySensedState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VehicleBodySensedState)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleBodySensedState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleBodySensedState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VehicleBodySensedState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VehicleBodySensedState)
    MergeFrom(*source);
  }
}

void VehicleBodySensedState::MergeFrom(const VehicleBodySensedState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VehicleBodySensedState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_id() != 0) {
    set_vehicle_id(from.vehicle_id());
  }
  if (from.x_accel() != 0) {
    set_x_accel(from.x_accel());
  }
  if (from.y_accel() != 0) {
    set_y_accel(from.y_accel());
  }
  if (from.z_accel() != 0) {
    set_z_accel(from.z_accel());
  }
  if (from.roll_rate() != 0) {
    set_roll_rate(from.roll_rate());
  }
  if (from.pitch_rate() != 0) {
    set_pitch_rate(from.pitch_rate());
  }
  if (from.yaw_rate() != 0) {
    set_yaw_rate(from.yaw_rate());
  }
}

void VehicleBodySensedState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VehicleBodySensedState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleBodySensedState::CopyFrom(const VehicleBodySensedState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VehicleBodySensedState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleBodySensedState::IsInitialized() const {
  return true;
}

void VehicleBodySensedState::Swap(VehicleBodySensedState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleBodySensedState::InternalSwap(VehicleBodySensedState* other) {
  using std::swap;
  swap(vehicle_id_, other->vehicle_id_);
  swap(x_accel_, other->x_accel_);
  swap(y_accel_, other->y_accel_);
  swap(z_accel_, other->z_accel_);
  swap(roll_rate_, other->roll_rate_);
  swap(pitch_rate_, other->pitch_rate_);
  swap(yaw_rate_, other->yaw_rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleBodySensedState::GetMetadata() const {
  protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleGlobalPosition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleGlobalPosition::kVehicleIdFieldNumber;
const int VehicleGlobalPosition::kLongitudeFieldNumber;
const int VehicleGlobalPosition::kLatitudeFieldNumber;
const int VehicleGlobalPosition::kAltitudeFieldNumber;
const int VehicleGlobalPosition::kXSpeedFieldNumber;
const int VehicleGlobalPosition::kYSpeedFieldNumber;
const int VehicleGlobalPosition::kZSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleGlobalPosition::VehicleGlobalPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleGlobalPosition();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:VehicleGlobalPosition)
}
VehicleGlobalPosition::VehicleGlobalPosition(const VehicleGlobalPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_id_, &from.vehicle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_speed_) -
    reinterpret_cast<char*>(&vehicle_id_)) + sizeof(z_speed_));
  // @@protoc_insertion_point(copy_constructor:VehicleGlobalPosition)
}

void VehicleGlobalPosition::SharedCtor() {
  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_speed_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(z_speed_));
  _cached_size_ = 0;
}

VehicleGlobalPosition::~VehicleGlobalPosition() {
  // @@protoc_insertion_point(destructor:VehicleGlobalPosition)
  SharedDtor();
}

void VehicleGlobalPosition::SharedDtor() {
}

void VehicleGlobalPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleGlobalPosition::descriptor() {
  ::protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleGlobalPosition& VehicleGlobalPosition::default_instance() {
  ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleGlobalPosition();
  return *internal_default_instance();
}

VehicleGlobalPosition* VehicleGlobalPosition::New(::google::protobuf::Arena* arena) const {
  VehicleGlobalPosition* n = new VehicleGlobalPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleGlobalPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:VehicleGlobalPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_speed_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(z_speed_));
  _internal_metadata_.Clear();
}

bool VehicleGlobalPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VehicleGlobalPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 vehicle_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float latitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float altitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x_speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y_speed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z_speed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VehicleGlobalPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VehicleGlobalPosition)
  return false;
#undef DO_
}

void VehicleGlobalPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VehicleGlobalPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vehicle_id(), output);
  }

  // float longitude = 2;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

  // float latitude = 3;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->latitude(), output);
  }

  // float altitude = 4;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->altitude(), output);
  }

  // float x_speed = 5;
  if (this->x_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->x_speed(), output);
  }

  // float y_speed = 6;
  if (this->y_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->y_speed(), output);
  }

  // float z_speed = 7;
  if (this->z_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->z_speed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:VehicleGlobalPosition)
}

::google::protobuf::uint8* VehicleGlobalPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:VehicleGlobalPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vehicle_id(), target);
  }

  // float longitude = 2;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longitude(), target);
  }

  // float latitude = 3;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->latitude(), target);
  }

  // float altitude = 4;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->altitude(), target);
  }

  // float x_speed = 5;
  if (this->x_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->x_speed(), target);
  }

  // float y_speed = 6;
  if (this->y_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->y_speed(), target);
  }

  // float z_speed = 7;
  if (this->z_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->z_speed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VehicleGlobalPosition)
  return target;
}

size_t VehicleGlobalPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VehicleGlobalPosition)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_id());
  }

  // float longitude = 2;
  if (this->longitude() != 0) {
    total_size += 1 + 4;
  }

  // float latitude = 3;
  if (this->latitude() != 0) {
    total_size += 1 + 4;
  }

  // float altitude = 4;
  if (this->altitude() != 0) {
    total_size += 1 + 4;
  }

  // float x_speed = 5;
  if (this->x_speed() != 0) {
    total_size += 1 + 4;
  }

  // float y_speed = 6;
  if (this->y_speed() != 0) {
    total_size += 1 + 4;
  }

  // float z_speed = 7;
  if (this->z_speed() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleGlobalPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VehicleGlobalPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleGlobalPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleGlobalPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VehicleGlobalPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VehicleGlobalPosition)
    MergeFrom(*source);
  }
}

void VehicleGlobalPosition::MergeFrom(const VehicleGlobalPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VehicleGlobalPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_id() != 0) {
    set_vehicle_id(from.vehicle_id());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.x_speed() != 0) {
    set_x_speed(from.x_speed());
  }
  if (from.y_speed() != 0) {
    set_y_speed(from.y_speed());
  }
  if (from.z_speed() != 0) {
    set_z_speed(from.z_speed());
  }
}

void VehicleGlobalPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VehicleGlobalPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleGlobalPosition::CopyFrom(const VehicleGlobalPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VehicleGlobalPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleGlobalPosition::IsInitialized() const {
  return true;
}

void VehicleGlobalPosition::Swap(VehicleGlobalPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleGlobalPosition::InternalSwap(VehicleGlobalPosition* other) {
  using std::swap;
  swap(vehicle_id_, other->vehicle_id_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(altitude_, other->altitude_);
  swap(x_speed_, other->x_speed_);
  swap(y_speed_, other->y_speed_);
  swap(z_speed_, other->z_speed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleGlobalPosition::GetMetadata() const {
  protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleIdentification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleIdentification::kVehicleIdFieldNumber;
const int VehicleIdentification::kVehicleTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleIdentification::VehicleIdentification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleIdentification();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:VehicleIdentification)
}
VehicleIdentification::VehicleIdentification(const VehicleIdentification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_id_, &from.vehicle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&vehicle_type_) -
    reinterpret_cast<char*>(&vehicle_id_)) + sizeof(vehicle_type_));
  // @@protoc_insertion_point(copy_constructor:VehicleIdentification)
}

void VehicleIdentification::SharedCtor() {
  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_type_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(vehicle_type_));
  _cached_size_ = 0;
}

VehicleIdentification::~VehicleIdentification() {
  // @@protoc_insertion_point(destructor:VehicleIdentification)
  SharedDtor();
}

void VehicleIdentification::SharedDtor() {
}

void VehicleIdentification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleIdentification::descriptor() {
  ::protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleIdentification& VehicleIdentification::default_instance() {
  ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleIdentification();
  return *internal_default_instance();
}

VehicleIdentification* VehicleIdentification::New(::google::protobuf::Arena* arena) const {
  VehicleIdentification* n = new VehicleIdentification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleIdentification::Clear() {
// @@protoc_insertion_point(message_clear_start:VehicleIdentification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_type_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(vehicle_type_));
  _internal_metadata_.Clear();
}

bool VehicleIdentification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VehicleIdentification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 vehicle_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vehicle_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VehicleIdentification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VehicleIdentification)
  return false;
#undef DO_
}

void VehicleIdentification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VehicleIdentification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vehicle_id(), output);
  }

  // uint32 vehicle_type = 2;
  if (this->vehicle_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vehicle_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:VehicleIdentification)
}

::google::protobuf::uint8* VehicleIdentification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:VehicleIdentification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vehicle_id(), target);
  }

  // uint32 vehicle_type = 2;
  if (this->vehicle_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vehicle_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VehicleIdentification)
  return target;
}

size_t VehicleIdentification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VehicleIdentification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_id());
  }

  // uint32 vehicle_type = 2;
  if (this->vehicle_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleIdentification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VehicleIdentification)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleIdentification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleIdentification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VehicleIdentification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VehicleIdentification)
    MergeFrom(*source);
  }
}

void VehicleIdentification::MergeFrom(const VehicleIdentification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VehicleIdentification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_id() != 0) {
    set_vehicle_id(from.vehicle_id());
  }
  if (from.vehicle_type() != 0) {
    set_vehicle_type(from.vehicle_type());
  }
}

void VehicleIdentification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VehicleIdentification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleIdentification::CopyFrom(const VehicleIdentification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VehicleIdentification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleIdentification::IsInitialized() const {
  return true;
}

void VehicleIdentification::Swap(VehicleIdentification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleIdentification::InternalSwap(VehicleIdentification* other) {
  using std::swap;
  swap(vehicle_id_, other->vehicle_id_);
  swap(vehicle_type_, other->vehicle_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleIdentification::GetMetadata() const {
  protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleInertialState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleInertialState::kVehicleIdFieldNumber;
const int VehicleInertialState::kLongitudeFieldNumber;
const int VehicleInertialState::kLatitudeFieldNumber;
const int VehicleInertialState::kAltitudeFieldNumber;
const int VehicleInertialState::kRollFieldNumber;
const int VehicleInertialState::kPitchFieldNumber;
const int VehicleInertialState::kHeadingFieldNumber;
const int VehicleInertialState::kNorthSpeedFieldNumber;
const int VehicleInertialState::kEastSpeedFieldNumber;
const int VehicleInertialState::kVerticalSpeedFieldNumber;
const int VehicleInertialState::kRollRateFieldNumber;
const int VehicleInertialState::kPitchRateFieldNumber;
const int VehicleInertialState::kYawRateFieldNumber;
const int VehicleInertialState::kNorthAccelFieldNumber;
const int VehicleInertialState::kEastAccelFieldNumber;
const int VehicleInertialState::kVerticalAccelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleInertialState::VehicleInertialState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleInertialState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:VehicleInertialState)
}
VehicleInertialState::VehicleInertialState(const VehicleInertialState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_id_, &from.vehicle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&vertical_accel_) -
    reinterpret_cast<char*>(&vehicle_id_)) + sizeof(vertical_accel_));
  // @@protoc_insertion_point(copy_constructor:VehicleInertialState)
}

void VehicleInertialState::SharedCtor() {
  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vertical_accel_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(vertical_accel_));
  _cached_size_ = 0;
}

VehicleInertialState::~VehicleInertialState() {
  // @@protoc_insertion_point(destructor:VehicleInertialState)
  SharedDtor();
}

void VehicleInertialState::SharedDtor() {
}

void VehicleInertialState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleInertialState::descriptor() {
  ::protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleInertialState& VehicleInertialState::default_instance() {
  ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleInertialState();
  return *internal_default_instance();
}

VehicleInertialState* VehicleInertialState::New(::google::protobuf::Arena* arena) const {
  VehicleInertialState* n = new VehicleInertialState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleInertialState::Clear() {
// @@protoc_insertion_point(message_clear_start:VehicleInertialState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vertical_accel_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(vertical_accel_));
  _internal_metadata_.Clear();
}

bool VehicleInertialState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VehicleInertialState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 vehicle_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float latitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float altitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float north_speed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &north_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float east_speed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &east_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vertical_speed = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vertical_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll_rate = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch_rate = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_rate = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float north_accel = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &north_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float east_accel = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &east_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vertical_accel = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vertical_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VehicleInertialState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VehicleInertialState)
  return false;
#undef DO_
}

void VehicleInertialState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VehicleInertialState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vehicle_id(), output);
  }

  // float longitude = 2;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

  // float latitude = 3;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->latitude(), output);
  }

  // float altitude = 4;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->altitude(), output);
  }

  // float roll = 5;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->roll(), output);
  }

  // float pitch = 6;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pitch(), output);
  }

  // float heading = 7;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->heading(), output);
  }

  // float north_speed = 8;
  if (this->north_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->north_speed(), output);
  }

  // float east_speed = 9;
  if (this->east_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->east_speed(), output);
  }

  // float vertical_speed = 10;
  if (this->vertical_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->vertical_speed(), output);
  }

  // float roll_rate = 11;
  if (this->roll_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->roll_rate(), output);
  }

  // float pitch_rate = 12;
  if (this->pitch_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->pitch_rate(), output);
  }

  // float yaw_rate = 13;
  if (this->yaw_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->yaw_rate(), output);
  }

  // float north_accel = 14;
  if (this->north_accel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->north_accel(), output);
  }

  // float east_accel = 15;
  if (this->east_accel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->east_accel(), output);
  }

  // float vertical_accel = 16;
  if (this->vertical_accel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->vertical_accel(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:VehicleInertialState)
}

::google::protobuf::uint8* VehicleInertialState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:VehicleInertialState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vehicle_id(), target);
  }

  // float longitude = 2;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longitude(), target);
  }

  // float latitude = 3;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->latitude(), target);
  }

  // float altitude = 4;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->altitude(), target);
  }

  // float roll = 5;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->roll(), target);
  }

  // float pitch = 6;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pitch(), target);
  }

  // float heading = 7;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->heading(), target);
  }

  // float north_speed = 8;
  if (this->north_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->north_speed(), target);
  }

  // float east_speed = 9;
  if (this->east_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->east_speed(), target);
  }

  // float vertical_speed = 10;
  if (this->vertical_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->vertical_speed(), target);
  }

  // float roll_rate = 11;
  if (this->roll_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->roll_rate(), target);
  }

  // float pitch_rate = 12;
  if (this->pitch_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->pitch_rate(), target);
  }

  // float yaw_rate = 13;
  if (this->yaw_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->yaw_rate(), target);
  }

  // float north_accel = 14;
  if (this->north_accel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->north_accel(), target);
  }

  // float east_accel = 15;
  if (this->east_accel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->east_accel(), target);
  }

  // float vertical_accel = 16;
  if (this->vertical_accel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->vertical_accel(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VehicleInertialState)
  return target;
}

size_t VehicleInertialState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VehicleInertialState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_id());
  }

  // float longitude = 2;
  if (this->longitude() != 0) {
    total_size += 1 + 4;
  }

  // float latitude = 3;
  if (this->latitude() != 0) {
    total_size += 1 + 4;
  }

  // float altitude = 4;
  if (this->altitude() != 0) {
    total_size += 1 + 4;
  }

  // float roll = 5;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 6;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // float heading = 7;
  if (this->heading() != 0) {
    total_size += 1 + 4;
  }

  // float north_speed = 8;
  if (this->north_speed() != 0) {
    total_size += 1 + 4;
  }

  // float east_speed = 9;
  if (this->east_speed() != 0) {
    total_size += 1 + 4;
  }

  // float vertical_speed = 10;
  if (this->vertical_speed() != 0) {
    total_size += 1 + 4;
  }

  // float roll_rate = 11;
  if (this->roll_rate() != 0) {
    total_size += 1 + 4;
  }

  // float pitch_rate = 12;
  if (this->pitch_rate() != 0) {
    total_size += 1 + 4;
  }

  // float yaw_rate = 13;
  if (this->yaw_rate() != 0) {
    total_size += 1 + 4;
  }

  // float north_accel = 14;
  if (this->north_accel() != 0) {
    total_size += 1 + 4;
  }

  // float east_accel = 15;
  if (this->east_accel() != 0) {
    total_size += 1 + 4;
  }

  // float vertical_accel = 16;
  if (this->vertical_accel() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleInertialState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VehicleInertialState)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleInertialState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleInertialState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VehicleInertialState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VehicleInertialState)
    MergeFrom(*source);
  }
}

void VehicleInertialState::MergeFrom(const VehicleInertialState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VehicleInertialState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_id() != 0) {
    set_vehicle_id(from.vehicle_id());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.north_speed() != 0) {
    set_north_speed(from.north_speed());
  }
  if (from.east_speed() != 0) {
    set_east_speed(from.east_speed());
  }
  if (from.vertical_speed() != 0) {
    set_vertical_speed(from.vertical_speed());
  }
  if (from.roll_rate() != 0) {
    set_roll_rate(from.roll_rate());
  }
  if (from.pitch_rate() != 0) {
    set_pitch_rate(from.pitch_rate());
  }
  if (from.yaw_rate() != 0) {
    set_yaw_rate(from.yaw_rate());
  }
  if (from.north_accel() != 0) {
    set_north_accel(from.north_accel());
  }
  if (from.east_accel() != 0) {
    set_east_accel(from.east_accel());
  }
  if (from.vertical_accel() != 0) {
    set_vertical_accel(from.vertical_accel());
  }
}

void VehicleInertialState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VehicleInertialState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleInertialState::CopyFrom(const VehicleInertialState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VehicleInertialState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleInertialState::IsInitialized() const {
  return true;
}

void VehicleInertialState::Swap(VehicleInertialState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleInertialState::InternalSwap(VehicleInertialState* other) {
  using std::swap;
  swap(vehicle_id_, other->vehicle_id_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(altitude_, other->altitude_);
  swap(roll_, other->roll_);
  swap(pitch_, other->pitch_);
  swap(heading_, other->heading_);
  swap(north_speed_, other->north_speed_);
  swap(east_speed_, other->east_speed_);
  swap(vertical_speed_, other->vertical_speed_);
  swap(roll_rate_, other->roll_rate_);
  swap(pitch_rate_, other->pitch_rate_);
  swap(yaw_rate_, other->yaw_rate_);
  swap(north_accel_, other->north_accel_);
  swap(east_accel_, other->east_accel_);
  swap(vertical_accel_, other->vertical_accel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleInertialState::GetMetadata() const {
  protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleModeCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleModeCommand::kVehicleIdFieldNumber;
const int VehicleModeCommand::kVehicleModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleModeCommand::VehicleModeCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleModeCommand();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:VehicleModeCommand)
}
VehicleModeCommand::VehicleModeCommand(const VehicleModeCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_id_, &from.vehicle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&vehicle_mode_) -
    reinterpret_cast<char*>(&vehicle_id_)) + sizeof(vehicle_mode_));
  // @@protoc_insertion_point(copy_constructor:VehicleModeCommand)
}

void VehicleModeCommand::SharedCtor() {
  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_mode_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(vehicle_mode_));
  _cached_size_ = 0;
}

VehicleModeCommand::~VehicleModeCommand() {
  // @@protoc_insertion_point(destructor:VehicleModeCommand)
  SharedDtor();
}

void VehicleModeCommand::SharedDtor() {
}

void VehicleModeCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleModeCommand::descriptor() {
  ::protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleModeCommand& VehicleModeCommand::default_instance() {
  ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleModeCommand();
  return *internal_default_instance();
}

VehicleModeCommand* VehicleModeCommand::New(::google::protobuf::Arena* arena) const {
  VehicleModeCommand* n = new VehicleModeCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleModeCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:VehicleModeCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_mode_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(vehicle_mode_));
  _internal_metadata_.Clear();
}

bool VehicleModeCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VehicleModeCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 vehicle_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vehicle_mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VehicleModeCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VehicleModeCommand)
  return false;
#undef DO_
}

void VehicleModeCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VehicleModeCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vehicle_id(), output);
  }

  // uint32 vehicle_mode = 2;
  if (this->vehicle_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vehicle_mode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:VehicleModeCommand)
}

::google::protobuf::uint8* VehicleModeCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:VehicleModeCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vehicle_id(), target);
  }

  // uint32 vehicle_mode = 2;
  if (this->vehicle_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vehicle_mode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VehicleModeCommand)
  return target;
}

size_t VehicleModeCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VehicleModeCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_id());
  }

  // uint32 vehicle_mode = 2;
  if (this->vehicle_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleModeCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VehicleModeCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleModeCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleModeCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VehicleModeCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VehicleModeCommand)
    MergeFrom(*source);
  }
}

void VehicleModeCommand::MergeFrom(const VehicleModeCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VehicleModeCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_id() != 0) {
    set_vehicle_id(from.vehicle_id());
  }
  if (from.vehicle_mode() != 0) {
    set_vehicle_mode(from.vehicle_mode());
  }
}

void VehicleModeCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VehicleModeCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleModeCommand::CopyFrom(const VehicleModeCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VehicleModeCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleModeCommand::IsInitialized() const {
  return true;
}

void VehicleModeCommand::Swap(VehicleModeCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleModeCommand::InternalSwap(VehicleModeCommand* other) {
  using std::swap;
  swap(vehicle_id_, other->vehicle_id_);
  swap(vehicle_mode_, other->vehicle_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleModeCommand::GetMetadata() const {
  protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleSystemStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleSystemStatus::kVehicleIdFieldNumber;
const int VehicleSystemStatus::kVehicleModeFieldNumber;
const int VehicleSystemStatus::kVehicleStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleSystemStatus::VehicleSystemStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleSystemStatus();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:VehicleSystemStatus)
}
VehicleSystemStatus::VehicleSystemStatus(const VehicleSystemStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_id_, &from.vehicle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&vehicle_state_) -
    reinterpret_cast<char*>(&vehicle_id_)) + sizeof(vehicle_state_));
  // @@protoc_insertion_point(copy_constructor:VehicleSystemStatus)
}

void VehicleSystemStatus::SharedCtor() {
  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_state_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(vehicle_state_));
  _cached_size_ = 0;
}

VehicleSystemStatus::~VehicleSystemStatus() {
  // @@protoc_insertion_point(destructor:VehicleSystemStatus)
  SharedDtor();
}

void VehicleSystemStatus::SharedDtor() {
}

void VehicleSystemStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleSystemStatus::descriptor() {
  ::protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleSystemStatus& VehicleSystemStatus::default_instance() {
  ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleSystemStatus();
  return *internal_default_instance();
}

VehicleSystemStatus* VehicleSystemStatus::New(::google::protobuf::Arena* arena) const {
  VehicleSystemStatus* n = new VehicleSystemStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleSystemStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:VehicleSystemStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_state_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(vehicle_state_));
  _internal_metadata_.Clear();
}

bool VehicleSystemStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VehicleSystemStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 vehicle_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vehicle_mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vehicle_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VehicleSystemStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VehicleSystemStatus)
  return false;
#undef DO_
}

void VehicleSystemStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VehicleSystemStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vehicle_id(), output);
  }

  // uint32 vehicle_mode = 2;
  if (this->vehicle_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vehicle_mode(), output);
  }

  // uint32 vehicle_state = 3;
  if (this->vehicle_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vehicle_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:VehicleSystemStatus)
}

::google::protobuf::uint8* VehicleSystemStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:VehicleSystemStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vehicle_id(), target);
  }

  // uint32 vehicle_mode = 2;
  if (this->vehicle_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vehicle_mode(), target);
  }

  // uint32 vehicle_state = 3;
  if (this->vehicle_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vehicle_state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VehicleSystemStatus)
  return target;
}

size_t VehicleSystemStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VehicleSystemStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_id());
  }

  // uint32 vehicle_mode = 2;
  if (this->vehicle_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_mode());
  }

  // uint32 vehicle_state = 3;
  if (this->vehicle_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleSystemStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VehicleSystemStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleSystemStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleSystemStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VehicleSystemStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VehicleSystemStatus)
    MergeFrom(*source);
  }
}

void VehicleSystemStatus::MergeFrom(const VehicleSystemStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VehicleSystemStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_id() != 0) {
    set_vehicle_id(from.vehicle_id());
  }
  if (from.vehicle_mode() != 0) {
    set_vehicle_mode(from.vehicle_mode());
  }
  if (from.vehicle_state() != 0) {
    set_vehicle_state(from.vehicle_state());
  }
}

void VehicleSystemStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VehicleSystemStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleSystemStatus::CopyFrom(const VehicleSystemStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VehicleSystemStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleSystemStatus::IsInitialized() const {
  return true;
}

void VehicleSystemStatus::Swap(VehicleSystemStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleSystemStatus::InternalSwap(VehicleSystemStatus* other) {
  using std::swap;
  swap(vehicle_id_, other->vehicle_id_);
  swap(vehicle_mode_, other->vehicle_mode_);
  swap(vehicle_state_, other->vehicle_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleSystemStatus::GetMetadata() const {
  protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleTelemetryCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleTelemetryCommand::kVehicleIdFieldNumber;
const int VehicleTelemetryCommand::kTelemetrySelectFieldNumber;
const int VehicleTelemetryCommand::kTelemetryRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleTelemetryCommand::VehicleTelemetryCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleTelemetryCommand();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:VehicleTelemetryCommand)
}
VehicleTelemetryCommand::VehicleTelemetryCommand(const VehicleTelemetryCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_id_, &from.vehicle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&telemetry_rate_) -
    reinterpret_cast<char*>(&vehicle_id_)) + sizeof(telemetry_rate_));
  // @@protoc_insertion_point(copy_constructor:VehicleTelemetryCommand)
}

void VehicleTelemetryCommand::SharedCtor() {
  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&telemetry_rate_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(telemetry_rate_));
  _cached_size_ = 0;
}

VehicleTelemetryCommand::~VehicleTelemetryCommand() {
  // @@protoc_insertion_point(destructor:VehicleTelemetryCommand)
  SharedDtor();
}

void VehicleTelemetryCommand::SharedDtor() {
}

void VehicleTelemetryCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleTelemetryCommand::descriptor() {
  ::protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleTelemetryCommand& VehicleTelemetryCommand::default_instance() {
  ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleTelemetryCommand();
  return *internal_default_instance();
}

VehicleTelemetryCommand* VehicleTelemetryCommand::New(::google::protobuf::Arena* arena) const {
  VehicleTelemetryCommand* n = new VehicleTelemetryCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleTelemetryCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:VehicleTelemetryCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&telemetry_rate_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(telemetry_rate_));
  _internal_metadata_.Clear();
}

bool VehicleTelemetryCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VehicleTelemetryCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 vehicle_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 telemetry_select = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &telemetry_select_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 telemetry_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &telemetry_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VehicleTelemetryCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VehicleTelemetryCommand)
  return false;
#undef DO_
}

void VehicleTelemetryCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VehicleTelemetryCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vehicle_id(), output);
  }

  // uint32 telemetry_select = 2;
  if (this->telemetry_select() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->telemetry_select(), output);
  }

  // uint32 telemetry_rate = 3;
  if (this->telemetry_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->telemetry_rate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:VehicleTelemetryCommand)
}

::google::protobuf::uint8* VehicleTelemetryCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:VehicleTelemetryCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vehicle_id(), target);
  }

  // uint32 telemetry_select = 2;
  if (this->telemetry_select() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->telemetry_select(), target);
  }

  // uint32 telemetry_rate = 3;
  if (this->telemetry_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->telemetry_rate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VehicleTelemetryCommand)
  return target;
}

size_t VehicleTelemetryCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VehicleTelemetryCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_id());
  }

  // uint32 telemetry_select = 2;
  if (this->telemetry_select() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->telemetry_select());
  }

  // uint32 telemetry_rate = 3;
  if (this->telemetry_rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->telemetry_rate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleTelemetryCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VehicleTelemetryCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleTelemetryCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleTelemetryCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VehicleTelemetryCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VehicleTelemetryCommand)
    MergeFrom(*source);
  }
}

void VehicleTelemetryCommand::MergeFrom(const VehicleTelemetryCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VehicleTelemetryCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_id() != 0) {
    set_vehicle_id(from.vehicle_id());
  }
  if (from.telemetry_select() != 0) {
    set_telemetry_select(from.telemetry_select());
  }
  if (from.telemetry_rate() != 0) {
    set_telemetry_rate(from.telemetry_rate());
  }
}

void VehicleTelemetryCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VehicleTelemetryCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleTelemetryCommand::CopyFrom(const VehicleTelemetryCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VehicleTelemetryCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleTelemetryCommand::IsInitialized() const {
  return true;
}

void VehicleTelemetryCommand::Swap(VehicleTelemetryCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleTelemetryCommand::InternalSwap(VehicleTelemetryCommand* other) {
  using std::swap;
  swap(vehicle_id_, other->vehicle_id_);
  swap(telemetry_select_, other->telemetry_select_);
  swap(telemetry_rate_, other->telemetry_rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleTelemetryCommand::GetMetadata() const {
  protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleTerminationCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleTerminationCommand::kVehicleIdFieldNumber;
const int VehicleTerminationCommand::kTerminationModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleTerminationCommand::VehicleTerminationCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleTerminationCommand();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:VehicleTerminationCommand)
}
VehicleTerminationCommand::VehicleTerminationCommand(const VehicleTerminationCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_id_, &from.vehicle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&termination_mode_) -
    reinterpret_cast<char*>(&vehicle_id_)) + sizeof(termination_mode_));
  // @@protoc_insertion_point(copy_constructor:VehicleTerminationCommand)
}

void VehicleTerminationCommand::SharedCtor() {
  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&termination_mode_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(termination_mode_));
  _cached_size_ = 0;
}

VehicleTerminationCommand::~VehicleTerminationCommand() {
  // @@protoc_insertion_point(destructor:VehicleTerminationCommand)
  SharedDtor();
}

void VehicleTerminationCommand::SharedDtor() {
}

void VehicleTerminationCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleTerminationCommand::descriptor() {
  ::protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleTerminationCommand& VehicleTerminationCommand::default_instance() {
  ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleTerminationCommand();
  return *internal_default_instance();
}

VehicleTerminationCommand* VehicleTerminationCommand::New(::google::protobuf::Arena* arena) const {
  VehicleTerminationCommand* n = new VehicleTerminationCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleTerminationCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:VehicleTerminationCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&termination_mode_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(termination_mode_));
  _internal_metadata_.Clear();
}

bool VehicleTerminationCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VehicleTerminationCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 vehicle_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 termination_mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &termination_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VehicleTerminationCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VehicleTerminationCommand)
  return false;
#undef DO_
}

void VehicleTerminationCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VehicleTerminationCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vehicle_id(), output);
  }

  // uint32 termination_mode = 2;
  if (this->termination_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->termination_mode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:VehicleTerminationCommand)
}

::google::protobuf::uint8* VehicleTerminationCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:VehicleTerminationCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vehicle_id(), target);
  }

  // uint32 termination_mode = 2;
  if (this->termination_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->termination_mode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VehicleTerminationCommand)
  return target;
}

size_t VehicleTerminationCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VehicleTerminationCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_id());
  }

  // uint32 termination_mode = 2;
  if (this->termination_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->termination_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleTerminationCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VehicleTerminationCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleTerminationCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleTerminationCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VehicleTerminationCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VehicleTerminationCommand)
    MergeFrom(*source);
  }
}

void VehicleTerminationCommand::MergeFrom(const VehicleTerminationCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VehicleTerminationCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_id() != 0) {
    set_vehicle_id(from.vehicle_id());
  }
  if (from.termination_mode() != 0) {
    set_termination_mode(from.termination_mode());
  }
}

void VehicleTerminationCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VehicleTerminationCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleTerminationCommand::CopyFrom(const VehicleTerminationCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VehicleTerminationCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleTerminationCommand::IsInitialized() const {
  return true;
}

void VehicleTerminationCommand::Swap(VehicleTerminationCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleTerminationCommand::InternalSwap(VehicleTerminationCommand* other) {
  using std::swap;
  swap(vehicle_id_, other->vehicle_id_);
  swap(termination_mode_, other->termination_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleTerminationCommand::GetMetadata() const {
  protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleWaypointCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleWaypointCommand::kVehicleIdFieldNumber;
const int VehicleWaypointCommand::kLongitudeFieldNumber;
const int VehicleWaypointCommand::kLatitudeFieldNumber;
const int VehicleWaypointCommand::kAltitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleWaypointCommand::VehicleWaypointCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleWaypointCommand();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:VehicleWaypointCommand)
}
VehicleWaypointCommand::VehicleWaypointCommand(const VehicleWaypointCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_id_, &from.vehicle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&vehicle_id_)) + sizeof(altitude_));
  // @@protoc_insertion_point(copy_constructor:VehicleWaypointCommand)
}

void VehicleWaypointCommand::SharedCtor() {
  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(altitude_));
  _cached_size_ = 0;
}

VehicleWaypointCommand::~VehicleWaypointCommand() {
  // @@protoc_insertion_point(destructor:VehicleWaypointCommand)
  SharedDtor();
}

void VehicleWaypointCommand::SharedDtor() {
}

void VehicleWaypointCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleWaypointCommand::descriptor() {
  ::protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleWaypointCommand& VehicleWaypointCommand::default_instance() {
  ::protobuf_ProtoPackets_2eproto::InitDefaultsVehicleWaypointCommand();
  return *internal_default_instance();
}

VehicleWaypointCommand* VehicleWaypointCommand::New(::google::protobuf::Arena* arena) const {
  VehicleWaypointCommand* n = new VehicleWaypointCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleWaypointCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:VehicleWaypointCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(altitude_));
  _internal_metadata_.Clear();
}

bool VehicleWaypointCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VehicleWaypointCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 vehicle_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float latitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float altitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VehicleWaypointCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VehicleWaypointCommand)
  return false;
#undef DO_
}

void VehicleWaypointCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VehicleWaypointCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vehicle_id(), output);
  }

  // float longitude = 2;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

  // float latitude = 3;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->latitude(), output);
  }

  // float altitude = 4;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->altitude(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:VehicleWaypointCommand)
}

::google::protobuf::uint8* VehicleWaypointCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:VehicleWaypointCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vehicle_id(), target);
  }

  // float longitude = 2;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longitude(), target);
  }

  // float latitude = 3;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->latitude(), target);
  }

  // float altitude = 4;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->altitude(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VehicleWaypointCommand)
  return target;
}

size_t VehicleWaypointCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VehicleWaypointCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_id());
  }

  // float longitude = 2;
  if (this->longitude() != 0) {
    total_size += 1 + 4;
  }

  // float latitude = 3;
  if (this->latitude() != 0) {
    total_size += 1 + 4;
  }

  // float altitude = 4;
  if (this->altitude() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleWaypointCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VehicleWaypointCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleWaypointCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleWaypointCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VehicleWaypointCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VehicleWaypointCommand)
    MergeFrom(*source);
  }
}

void VehicleWaypointCommand::MergeFrom(const VehicleWaypointCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VehicleWaypointCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_id() != 0) {
    set_vehicle_id(from.vehicle_id());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
}

void VehicleWaypointCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VehicleWaypointCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleWaypointCommand::CopyFrom(const VehicleWaypointCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VehicleWaypointCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleWaypointCommand::IsInitialized() const {
  return true;
}

void VehicleWaypointCommand::Swap(VehicleWaypointCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleWaypointCommand::InternalSwap(VehicleWaypointCommand* other) {
  using std::swap;
  swap(vehicle_id_, other->vehicle_id_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(altitude_, other->altitude_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleWaypointCommand::GetMetadata() const {
  protobuf_ProtoPackets_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoPackets_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
